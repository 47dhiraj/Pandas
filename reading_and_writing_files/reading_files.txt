
Pandas is a popular data manipulation library in Python, and it can read a variety of file formats. 


Some of the file formats that Pandas can read include:

    1. CSV (Comma Separated Values) files: These are text files that contain tabular data separated by commas. The `read_csv()` method is used to read CSV files in Pandas.
                    eg: df = pd.read_csv('filename.csv')

    2. Excel files: Pandas can also read data from Excel files. 
                    The `read_excel()` method is used to read Excel files in Pandas.
                
                        To use this method ==> pip install openpyxl   , u have to install openpyxl package.

    3. JSON (JavaScript Object Notation) files: These are text files that contain data in the form of key-value pairs. 
                    The `read_json()` method is used to read JSON files in Pandas.

    4. HTML files: Pandas can also read data from HTML files. The `read_html()` method is used to read HTML files in Pandas.

    5. SQL databases: Pandas can also read data from SQL databases. 
                    The `read_sql()` method is used to read data from SQL databases.
    
    6. Txt File: Pandas can also read txt file.
                This method can read a text file in table format, where the columns are separated by a delimiter. 
                You can specify the delimiter used in the file, such as tabs, spaces, or other characters, using the delimiter or sep parameter.





# The pandas read_csv() method is a powerful tool for reading in data from a CSV (comma-separated values) file into a pandas DataFrame object. Here are the main parameters you can use with this method:


    ==> filepath_or_buffer: This is the first required parameter, and it specifies the location of the CSV file to be read. 
            This can be a file path (either absolute or relative) or a URL.


    ==> sep: This parameter specifies the delimiter used in the CSV file. By default, it is set to "," (comma-separated).


    ==> encoding: The encoding parameter specifies the character encoding to be used when reading the CSV file. 
            Character encoding is a system that maps a set of characters to their binary representations, and there are many different encoding standards available, such as UTF-8, ISO-8859-1, and Windows-1252.
            By default, read_csv() assumes the file is encoded in 'utf-8'. 
            However, if the CSV file has been encoded in a different way, you can specify the correct encoding using the encoding parameter.


    ==> header: This parameter specifies which row(s) of the CSV file should be used as the column names for the DataFrame. 
            If set to "infer" (the default), pandas will try to determine the header row automatically. 
            If set to an integer or a list of integers, the corresponding row(s) will be used as the header.


    ==> index_col: This parameter specifies which column(s) of the CSV file should be used as the index (row labels) for the DataFrame. 
            By default, this is set to None, which means that the DataFrame will have a default integer index.


    ==> usecols: This parameter allows you to specify a subset of columns from the CSV file to be read into the DataFrame. 
            This can be a list of column names or a list of column indices.


    ==> dtype: This parameter allows you to specify the data type for each column in the DataFrame. 
            This can be a dictionary mapping column names to data types, or a single data type for all columns.


    ==> na_values: This parameter allows you to specify a list of values that should be treated as missing values (NaN) in the DataFrame.


    ==> parse_dates: This parameter allows you to specify a list of columns that should be parsed as dates.


    NOTE: The 'r' character inside the read_csv() method is actually not related to the method itself, but rather to how the file path is specified.
        In Python, the 'r' character before a string literal indicates that it is a "raw" string. 
        This means that backslashes in the string will be treated as literal backslashes instead of escape characters.
