
# merge(): 
        
        ==> The merge() function in Pandas is used to combine two or more dataframes based on one or more common columns, known as keys. 

        ==> The resulting merged dataframe contains all the columns from both dataframes and rows where the values in the key columns match.


    
    ==> The `how` parameter in the `merge()` function specifies the type of merge to perform. 
        It determines how the resulting dataframe will be constructed based on the values in the key columns.


        There are four types of merges that can be performed using the `how` parameter:

        - `inner`: This type of merge returns only the rows that have matching values in both dataframes based on the key columns. 
                    The resulting dataframe will have only the columns that are present in both dataframes. This is the default merge type if the `how` parameter is not specified.

        - `outer`: This type of merge returns all the rows from both dataframes, with `NaN` values inserted in the columns where there is no match. 
                    This type of merge is also known as a full outer join.

        - `left`: This type of merge returns all the rows from the left dataframe and the matching rows from the right dataframe based on the key columns. 
                    The resulting dataframe will have all the columns from the left dataframe and only the non-key columns from the right dataframe.

        - `right`: This type of merge returns all the rows from the right dataframe and the matching rows from the left dataframe based on the key columns. 
                    The resulting dataframe will have all the columns from the right dataframe and only the non-key columns from the left dataframe.

        - `cross`: This method returns a new DataFrame that contains all possible combinations of rows between the two DataFrames.


        EXAMPLE to illustrate the different types of merges:


            import pandas as pd

            df1 = pd.DataFrame({'key': ['A', 'B', 'C', 'D'],
                                'value': [1, 2, 3, 4]})

            df2 = pd.DataFrame({'key': ['B', 'D', 'E', 'F'],
                                'value': [5, 6, 7, 8]})


            # inner merge
            inner_merge = pd.merge(df1, df2, on='key')
            print(inner_merge)


            # outer merge
            outer_merge = pd.merge(df1, df2, on='key', how='outer')
            print(outer_merge)


            # left merge
            left_merge = pd.merge(df1, df2, on='key', how='left')
            print(left_merge)


            # right merge
            right_merge = pd.merge(df1, df2, on='key', how='right')
            print(right_merge)

            # cross merge (real life me ekdam less use huncha)
            cross_merge = df1.merge(df2, how = 'cross')
            print(cross_merge)

        The output of the above code will be:

            # inner merge
            key  value_x  value_y
            0   B        2        5
            1   D        4        6


            # outer merge
            key  value_x  value_y
            0   A      1.0      NaN
            1   B      2.0      5.0
            2   C      3.0      NaN
            3   D      4.0      6.0
            4   E      NaN      7.0
            5   F      NaN      8.0


            # left merge
            key  value_x  value_y
            0   A        1      NaN
            1   B        2      5.0
            2   C        3      NaN
            3   D        4      6.0


            # right merge
            key  value_x  value_y
            0   B      2.0        5
            1   D      4.0        6
            2   E      NaN        7
            3   F      NaN        8
            


In Summary,

    the inner merge returns only the rows where the 'key' values match in both dataframes, 
    the outer merge returns all the rows from both dataframes with `NaN` values inserted where there is no match, 
    the left merge returns all the rows from the left dataframe and the matching rows from right dataframe based on the key columns,
    the right merge returns all the rows from the right dataframe and the matching rows from left dataframe based on the key columns.

